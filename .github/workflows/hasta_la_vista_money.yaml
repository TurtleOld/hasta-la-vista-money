# This is a basic workflow to help you get started with Actions

name: hasta-la-vista-money

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  - push

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9.12'


      # Runs a single command using the runners shell
      - name: Install dependencies
        run: |
          python -m pip install -r requirements.txt
          python -m pip install --upgrade pip
          pip install poetry
          make install

      - name: Run migrations
        run: python manage.py migrate

      # Install falke8
      - name: Install flake8
        run: python -m pip install flake8

          # Run the flake lint
      - name: flake8 Lint
        uses: py-actions/flake8@v2
        with:
          exclude: 'migrations'
          max-line-length: "80"

      - name: Start linter
        run: make lint

      - name: Test & publish code coverage
        uses: paambaati/codeclimate-action@v3.0.0
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.COVERAGE_ID_APPLICATION }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        with:
          coverageCommand: make coverage
          debug: true