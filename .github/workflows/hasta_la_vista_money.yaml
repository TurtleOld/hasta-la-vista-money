# This is a basic workflow to help you get started with Actions

name: hasta-la-vista-money
permissions:
  contents: read
# Controls when the workflow will run
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [ 3.11, 3.12, 3.13 ]

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5.0.0
      - uses: actions/setup-python@v6.0.0
        with:
          python-version: '3.13.7'

      - name: Install uv
        uses: astral-sh/setup-uv@208b0c0ee42039b2cbf5fd3ca0ec7d6d8a49336f
        with:
          version: "latest"

      - name: Install the latest version of ruff
        uses: astral-sh/ruff-action@5071c37a33310f49513a2709d057ea5cf4806793
        with:
          version: "latest"
      - run: ruff check --fix
      - run: ruff format

      - name: Install dependencies
        run: |
          uv venv .venv && uv pip install -e '.[dev]'

      # run makemigrations and migrate
      - name: Run makemigrations
        run: uv run python manage.py makemigrations
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          REFRESH_TOKEN_LIFETIME: ${{ secrets.REFRESH_TOKEN_LIFETIME }}
          ACCESS_TOKEN_LIFETIME: ${{ secrets.ACCESS_TOKEN_LIFETIME }}

      - name: Run check
        run: uv run python manage.py check
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          REFRESH_TOKEN_LIFETIME: ${{ secrets.REFRESH_TOKEN_LIFETIME }}
          ACCESS_TOKEN_LIFETIME: ${{ secrets.ACCESS_TOKEN_LIFETIME }}

      - name: Run migrations
        run: uv run python manage.py migrate
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          REFRESH_TOKEN_LIFETIME: ${{ secrets.REFRESH_TOKEN_LIFETIME }}
          ACCESS_TOKEN_LIFETIME: ${{ secrets.ACCESS_TOKEN_LIFETIME }}

      - name: Run Tests
        run: make test
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/github_actions
          REFRESH_TOKEN_LIFETIME: ${{ secrets.REFRESH_TOKEN_LIFETIME }}
          ACCESS_TOKEN_LIFETIME: ${{ secrets.ACCESS_TOKEN_LIFETIME }}

      - name: Run Tests with Coverage
        run: make coverage
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/github_actions
          REFRESH_TOKEN_LIFETIME: ${{ secrets.REFRESH_TOKEN_LIFETIME }}
          ACCESS_TOKEN_LIFETIME: ${{ secrets.ACCESS_TOKEN_LIFETIME }}

      - name: Run codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@a38818475bb21847788496e9f0fddaa4e84955ba
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: 'coverage.xml'
