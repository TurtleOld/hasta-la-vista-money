#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ –≤ Django –ø—Ä–æ–µ–∫—Ç–µ.
"""

import os
import sys
import requests
from pathlib import Path
from urllib.parse import urljoin

def check_static_files_locally():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª—å–Ω–æ"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ...")
    
    static_dir = Path("static")
    if not static_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è static –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    required_files = [
        "js/jquery-3.7.1.min.js",
        "js/script.js",
        "js/errors_form.js",
        "bootstrap/js/bootstrap.bundle.min.js",
        "css/styles.min.css"
    ]
    
    missing_files = []
    for file_path in required_files:
        full_path = static_dir / file_path
        if not full_path.exists():
            missing_files.append(file_path)
        else:
            print(f"‚úÖ {file_path}")
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    return True

def check_static_files_production(base_url="http://localhost:8090"):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ"""
    print(f"\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ ({base_url})...")
    
    static_files = [
        "/static/js/jquery-3.7.1.min.js",
        "/static/js/script.js", 
        "/static/js/errors_form.js",
        "/static/bootstrap/js/bootstrap.bundle.min.js",
        "/static/css/styles.min.css"
    ]
    
    issues = []
    
    for file_path in static_files:
        url = urljoin(base_url, file_path)
        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                content_type = response.headers.get('content-type', '')
                if 'javascript' in content_type or 'css' in content_type:
                    print(f"‚úÖ {file_path} - {content_type}")
                else:
                    print(f"‚ö†Ô∏è  {file_path} - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π MIME —Ç–∏–ø: {content_type}")
                    issues.append(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π MIME —Ç–∏–ø –¥–ª—è {file_path}: {content_type}")
            else:
                print(f"‚ùå {file_path} - HTTP {response.status_code}")
                issues.append(f"HTTP {response.status_code} –¥–ª—è {file_path}")
        except requests.RequestException as e:
            print(f"‚ùå {file_path} - –æ—à–∏–±–∫–∞: {e}")
            issues.append(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ {file_path}: {e}")
    
    return issues

def check_csp_headers(base_url="http://localhost:8090"):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç CSP –∑–∞–≥–æ–ª–æ–≤–∫–∏"""
    print(f"\nüõ°Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ CSP –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ ({base_url})...")
    
    try:
        response = requests.get(base_url, timeout=10)
        csp_header = response.headers.get('content-security-policy', '')
        
        if csp_header:
            print(f"‚úÖ CSP –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞–π–¥–µ–Ω")
            if "'unsafe-hashes'" in csp_header:
                print("‚úÖ unsafe-hashes —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –≤ CSP")
            else:
                print("‚ö†Ô∏è  unsafe-hashes –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ CSP")
        else:
            print("‚ùå CSP –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ CSP: {e}")

def main():
    print("üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏\n")
    
    # –õ–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    local_ok = check_static_files_locally()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    production_issues = check_static_files_production()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CSP
    check_csp_headers()
    
    print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    
    if not local_ok:
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: make staticfiles")
    
    if production_issues:
        print("2. –ü—Ä–æ–±–ª–µ–º—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ:")
        for issue in production_issues:
            print(f"   - {issue}")
        print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: make docker-restart")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: make docker-logs")
    
    print("5. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ nginx –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤")
    print("6. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ WhiteNoise –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Django")

if __name__ == "__main__":
    main()
