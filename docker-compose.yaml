name: hlvm-dev

services:
  db:
    image: postgres:18
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-hlvm}
    env_file:
      - .env
    ports:
      - "5433:5432"
    restart: always
    networks:
      - default
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  hlvm-server:
    build:
      context: ./
      dockerfile: docker/production.Dockerfile
    volumes:
      - staticfiles_data:/app/staticfiles
    ports:
      - "8001:8001"
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgres://postgres:postgres@db:5432/hlvm}
      SECRET_KEY: ${SECRET_KEY:-change_me}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1}
      BASE_URL: ${BASE_URL:-http://127.0.0.1:8001}
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS:-http://127.0.0.1:8001}
      SENTRY_DSN: ${SENTRY_DSN:-}
      SENTRY_ENVIRONMENT: ${SENTRY_ENVIRONMENT:-development}
      SENTRY_ENDPOINT: ${SENTRY_ENDPOINT:-}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - default
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "8090:80"
    volumes:
      - ${CONF_PATH:-./nginx}/nginx.conf:/etc/nginx/nginx.conf
      - staticfiles_data:/app/staticfiles
    depends_on:
      - hlvm-server
    networks:
      - default
    restart: unless-stopped

volumes:
  postgres_data:
  staticfiles_data:

networks:
  default:
    driver: bridge
